                  Application Accounting for EGI InSPIRE
                  ======================================

1.0. What it does

  This software supplies a sensor for application accounting, with the
  goal to account start and end time as well as the name of the launched
  programs.

2.0. How it works

2.1. Client (library)

  The client is a library that overwrites the libc `execve()' function
  used to call a program. Amongst others, the Bourne Again Shell (bash)
  uses this function after a fork to call a program. The client intercepts
  the function and wraps the accounting logic around this call. The
  information is then sent to the server.

2.2. Server (daemon).

  The server receives the sensor data from all clients and is meant to run
  in the background. Upon receiving data, the server can then look up the
  user in the girdmap file to translate the local user to a global
  identifier.

2.3. Communication.

  Communication between the Client and the Server is implemented using
  [ZeroMQ](http://zero.mq). If the Client can not connect to the Server, a
  background process is launched after the completion of the application
  that sends the message once the Server is running again.

3.0. How to run it

  The project uses CMake for a multi-platform build. Build requirements
  are:

  o CMake (~= 2.8.0)
  o Make (~= 3.81)
  o Clang (~= 3.4)
  o ZeroMQ (~= 3.2.0)
  o LibYAML (~= 0.1.4)

  Development packages are required for ZeroMQ and LibYAML.

  To get started, type:

  $ cd build
  $ cmake ..
  $ make install

  Build packages (RPM and DEB) with

  $ make package

  Launch client bash wrapper:

  $ acc_bash

  Lauch server (in a separate terminal):

  $ acc_server

  Now if you launch programs on the bash you should see accounting records
  being outputted by the server. Note that `echo' is not a program but a
  bash builtin, therefore it does not create a record (nor does it launch
  any application).

